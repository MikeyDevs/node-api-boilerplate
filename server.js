/*******************************************************************************************************************
THIS IS OUR MAIN SERVER FILE. SERVERS LISTEN AND RESPOND TO REQUESTS, SO WE'RE GOING TO BUILD A SERVER USING
NODE/EXPRESS TO DO JUST THAT.
*******************************************************************************************************************/

// HERE WE LIST ALL OF OUR DEPENDENCIES AND SAVE THEM TO VARIABLES WE CAN USE LATER.
// MAKE SURE TO NPM INSTALL AND SAVE THESE TO YOUR PACKAGE.JSON FILE!
const express = require("express");
const bodyParser = require("body-parser");

// THIS IS WHERE WE INITIALIZE AN INSTANCE OF EXPRESS.
const app = express();

// NOW, WE START LISTENING TO THE SPECIFIED PORT WE LIST BELOW. THE FIRST IS USED FOR PRODUCTION, 
// THE SECOND IS USED DURING TESTING/DEVELOPMENT.
const port = process.env.PORT || 8000;

// BY ITSELF, NODE AND EXPRESS CANNOT READ URL-ENCODED REQUESTS. BUT BODY-PARSER CAN, AND THAT'S WHAT WE ARE ENABLING THE APP TO USE HERE. 
// THIS IS CALLED "MIDDLEWARE".
// BEWARE: SOME VERSIONS OF EXPRESS COME WITH BODY-PARDER PRE-INSTALLED. IF YOUR SERVER KEEPS CRASHING, TRY DELETING THIS LINE.
app.use(bodyParser.urlencoded({ extended: true }))

// APP.LISTEN TAKES A PORT NUMBER TO LISTEN TO, AND A CALLBACK FUNCTION THAT EXECUTES WHEN THAT PORT IS ACCESSED.
app.listen(port, () => {
    console.log(`Server listening on ${port}`);
})

/*******************************************************************************************************************
ALL ABOUT CRUD (CREATE, READ, UPDATE, DELETE) & RESTful API ROUTES:
NOW, IT'S TIME TO CREATE OUR CRUD FUNCTIONS TO HANDLE 4 TYPES OF REQUESTS: CREATE, READ, UPDATE, AND DELETE; 
HENCE THE NAME, "CRUD."
*******************************************************************************************************************/

/* CREATE */

// FIRST, WE'LL WRITE OUR "CREATE" CALLBACK FUNCTION TO HANDLE ALL REQUESTS THAT WILL CREATE NEW DATA TO OUR ENDPOINT (LIKE A DATABASE).
// NOTE THAT THE URL PASSED IN AS A STRING HERE CAN BE CUSTOMIZED TO FIT YOUR PROJECT NEEDS.
app.post("/post", (req, res) => {
    // THIS WILL ALLOW US TO VIEW THE DATA RECEIVED FROM THE REQUESTOR BEFORE WE DO SOMETHING WITH IT.
    console.log(req.body)

    // DO SOMETHING HERE, EITHER VIA A DATABASE, ENDPOINT, OR MANIPULATING THE DATA ITSELF.

    // HERE, WE CAN INPUT THE DATA OR FILE WE WANT TO SEND TO A DATABASE, REQUESTOR, ETC.
    res.send()
})

/* READ */

// NEXT, WE'LL CREATE OUR "READ" ROUTE. THIS WILL ALLOW THE CLIENT TO REQUEST A PAGE OR OTHER DATA TO RECEIVE - 
// EITHER FROM A DATABASE OR THE SERVER DIRECTLY.
// NOTE THAT THE URL HAS A PARAMATER WITH A COLON (:id). 
// THIS ALLOWS THE URL TO BE A PLACEHOLDER OF SORTS SO THAT IT CAN BE SET DYNAMICALLY IN THE CODE.
app.get("/get/:id", (req, res) => {
        // THIS WILL ALLOW US TO VIEW THE DATA RECEIVED FROM THE REQUESTOR BEFORE WE DO SOMETHING WITH IT.
        console.log(req.body)
        // HERE, WE CAN INPUT THE DATA OR FILE WE WANT TO SEND TO THE CLIENT.
        res.send()
})

/* UPDATE */

// NOW, WE'LL CREATE OUR "UPDATE" ROUTE. THIS ALLOWS US TO UPDATE ANY EXISTING DATA TO A NEW VALUE, SUCH AS 
// UPDATING A NAME IN A DATABASE, CHANGING AN ACCOUNT NUMBER, ETC.
// NOTE THAT, JUST AS IN THE "READ" ROUTE, THERE IS A URL PARAMETER (:id) THAT IS USED IN THE URL TO SPECIFY THE ID OF THE
// ITEM WE ARE UPDATING.
app.put("/put/:id", (req, res) => {
        // THIS WILL ALLOW US TO VIEW THE DATA RECEIVED FROM THE REQUESTOR BEFORE WE DO SOMETHING WITH IT.
        console.log(req.body)

        // DO SOMETHING HERE, EITHER VIA A DATABASE, ENDPOINT, OR MANIPULATING THE DATA ITSELF.

        // HERE, AFTER UPDATING THE ITEM, WE CAN SEND A RESPONSE TO THE CLIENT OR REQUESTOR.
        res.send("Item updated!")
})

/* DELETE */

// FINALLY, WE CREATE OUR "DELETE" ROUTE. THIS ROUTE IS USED TO ERASE A CERTAIN DATAPOINT FROM A DATABASE OR ENDPOINT.
// NOTE THAT, JUST AS IN THE "READ" ROUTE, THERE IS A URL PARAMETER (:id) THAT IS USED IN THE URL TO SPECIFY THE ID OF THE
// ITEM WE ARE DELETING. 
app.delete("/delete/:id", (req, res) => {
    // THIS WILL ALLOW US TO VIEW THE DATA RECEIVED FROM THE REQUESTOR BEFORE WE DO SOMETHING WITH IT.
    console.log(req.body)

    // DO SOMETHING HERE, EITHER VIA A DATABASE, ENDPOINT, OR MANIPULATING THE DATA ITSELF.

    // HERE, AFTER DELETING THE ITEM, WE CAN SEND A RESPONSE TO THE CLIENT OR REQUESTOR.
    res.send("Item deleted!")
})

/*******************************************************************************************************************
        FEEL FREE TO USE THIS BOILERPLATE CODE FOR ANY PROJECTS REQUIRING CREATING AN API ON THE BACKEND!
                                              THANK YOU!
                                            ~~MIKEYDEVS~~
*******************************************************************************************************************/